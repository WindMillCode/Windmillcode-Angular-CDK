import { transformObjectKeys } from "@core/utility/common-utils"
import { RecursiveSnakeCaseType, transformFromCamelCaseToSnakeCase, transformFromSnakeCaseToCamelCase } from "@core/utility/string-utils"
import { WMLConstructorDecorator } from "@windmillcode/wml-components-base"
import { Observable, of, take } from "rxjs"

export let <%= name %>Load = (uiBody:<%= capitalize(name)%>UIRequestBody): Observable<<%= capitalize(name)%>APIRequestBody>=>{



  let apiBody = new <%= capitalize(name)%>APIRequestBody({data:transformObjectKeys(
    uiBody,
    transformFromCamelCaseToSnakeCase
  )})
  return of(apiBody)
  .pipe(
    take(1),
  )
}

export let <%= name %>Success = (apiBody:<%= capitalize(name)%>APIResponseBody):<%= capitalize(name)%>UIResponseBody=>{
  let uiBody = new <%= capitalize(name)%>UIResponseBody(transformObjectKeys(
    apiBody.data,
    transformFromSnakeCaseToCamelCase
  ))
  return uiBody
}

@WMLConstructorDecorator
export class <%= capitalize(name)%>UIRequestBody {
  constructor(props:Partial<<%= capitalize(name)%>UIRequestBody>={}){}
}

@WMLConstructorDecorator
export class <%= capitalize(name)%>APIRequestBody {
  constructor(props:Partial<<%= capitalize(name)%>APIRequestBody>={}){}
  data:RecursiveSnakeCaseType<<%= capitalize(name)%>UIRequestBody>
}

@WMLConstructorDecorator
export class <%= capitalize(name)%>UIResponseBody {
  constructor(props:Partial<<%= capitalize(name)%>UIResponseBody>={}){}

}

@WMLConstructorDecorator
export class <%= capitalize(name)%>APIResponseBody {
  constructor(props:Partial<<%= capitalize(name)%>APIResponseBody>={}){}
  data:RecursiveSnakeCaseType<<%= capitalize(name)%>UIResponseBody>
}

